/* from python cpython/Lib/keyword.py */

/*"""Keywords (from "Grammar/python.gram")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree and run:

    PYTHONPATH=Tools/peg_generator python3 -m pegen.keywordgen \
        Grammar/python.gram \
        Grammar/Tokens \
        Lib/keyword.py

Alternatively, you can run 'make regen-keyword'.
"""*/
#ifndef _STRING_H
#include <string.h>
#endif

char *__pyall__[6] = {"iskeyword", "issoftkeyword", "kwlist", "kwlist_len", "softkwlist", "softkwlist_len"};

/* Python type list */
char *PY_TYPES_LIST[7] = {
    "False",
    "None",
    "True",
    "global",
    "class",
    "def",
    "nonlocal",
};

int PY_TYPES_LIST_LEN = 6;

/* Python keyword list */
char *PY_KW_LIST[28] = {
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "continue",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
};

int PY_KW_LIST_LEN = 28;

/* Python soft keyword list */
char *PY_SOFT_KW_LIST[3] = {"_", "case", "match"};
int PY_SOFT_KW_LIST_LEN = 3;

/* check if keyw is a Python keyword or not */
int ispykeyword (char *keyw)
{
    int i;
    for (i = 0; i < PY_KW_LIST_LEN; i++)
    if (strcmp(PY_KW_LIST[i], keyw) == 0)
        return 1;
    return 0;
}
/* check if keyw is a Python soft keyword or not */
int ispysoftkeyword (char *keyw)
{
    int i;
    for (i = 0; i < PY_SOFT_KW_LIST_LEN; i++)
    if (strcmp(PY_SOFT_KW_LIST[i], keyw) == 0)
        return 1;
    return 0;
}

/* check if pytyp is a Python types or not */
int ispytype(char *pytyp)
{
    int i;
    for (i = 0; i < PY_TYPES_LIST_LEN; i++)
    if (strcmp(PY_TYPES_LIST[i], pytyp) == 0)
        return 1;
    return 0;

}